package com.example.cashpilot.viewmodel

import androidx.lifecycle.ViewModel
import androidx.lifecycle.viewModelScope
import com.example.cashpilot.data.local.CreditOfferDao
import com.example.cashpilot.data.local.CreditOfferEntity
import com.example.cashpilot.data.model.CreditOfferDto
import com.example.cashpilot.data.remote.RetrofitClient
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.flow.*
import kotlinx.coroutines.launch


class CreditViewModel(private val dao: CreditOfferDao) : ViewModel() {

    private val _amount = MutableStateFlow("")
    val amount: StateFlow<String> = _amount.asStateFlow()

    private val _termMonths = MutableStateFlow("")
    val termMonths: StateFlow<String> = _termMonths.asStateFlow()

    // –°—Ç–µ–π—Ç –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∫—Ä–µ–¥–∏—Ç–Ω—ã—Ö –æ—Ñ—Ñ–µ—Ä–æ–≤ –∏–∑ –ë–î
    private val dbOffersFlow = dao.getAll()
        .map { list ->
            list.map {
                CreditOfferDto(
                    bankName = it.bankName,
                    minAmount = it.minAmount,
                    term = it.term,
                    creditType = it.creditType
                )
            }
        }

    // –°—Ç–µ–π—Ç –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¢–∏–Ω—å–∫–æ—Ñ—Ñ –æ—Ñ—Ñ–µ—Ä–æ–≤ –∏–∑ —Å–µ—Ç–∏
    private val _tinkoffOffers = MutableStateFlow<List<CreditOfferDto>>(emptyList())
    val tinkoffOffers = _tinkoffOffers.asStateFlow()

    // –û–±—ä–µ–¥–∏–Ω—è–µ–º –æ—Ñ—Ñ–µ—Ä—ã –∏–∑ –ë–î –∏ –¢–∏–Ω—å–∫–æ—Ñ—Ñ –æ—Ñ—Ñ–µ—Ä—ã –≤ –æ–¥–∏–Ω –æ–±—â–∏–π —Å–ø–∏—Å–æ–∫
    val offers: StateFlow<List<CreditOfferDto>> = combine(
        dbOffersFlow,
        tinkoffOffers
    ) { dbList, tinkoffList ->
        // –ú–æ–∂–Ω–æ –æ–±—ä–µ–¥–∏–Ω—è—Ç—å —Å–ø–∏—Å–∫–∏, –∏—Å–∫–ª—é—á–∞—è –¥—É–±–ª–∏–∫–∞—Ç—ã –ø–æ —É–Ω–∏–∫–∞–ª—å–Ω–æ–º—É –ø—Ä–∏–∑–Ω–∞–∫—É, –Ω–∞–ø—Ä–∏–º–µ—Ä –ø–æ bankName + creditType –∏ —Ç.–¥.
        (dbList + tinkoffList).distinctBy { it.bankName + it.creditType }
    }.stateIn(viewModelScope, SharingStarted.Eagerly, emptyList())

    fun onAmountChange(newAmount: String) {
        _amount.value = newAmount
    }

    fun onTermChange(newTerm: String) {
        _termMonths.value = newTerm
    }

    fun onShowClicked() {
        viewModelScope.launch(Dispatchers.IO) {
            try {
                // –ó–∞–≥—Ä—É–∂–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ API –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
                val dtos = RetrofitClient.creditApi.getCreditOffers()
                println("üîç –ü–æ–ª—É—á–µ–Ω–æ –æ—Ç API: ${dtos.size}")
                dtos.forEach {
                    println("üì¶ DTO: ${it.bankName}, ${it.minAmount}, ${it.term}")
                }
                val entities = dtos.map {
                    CreditOfferEntity(
                        bankName = it.bankName,
                        minAmount = it.minAmount,
                        term = it.term,
                        creditType = it.creditType
                    )
                }
                dao.clearAll()
                dao.insertAll(entities)
                println("‚úÖ –°–æ—Ö—Ä–∞–Ω–∏–ª–∏ –≤ –ë–î: ${entities.size}")




            } catch (e: Exception) {
                println("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: ${e.message}")
                e.printStackTrace()
            }
        }
    }
}
